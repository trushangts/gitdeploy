<?php

/* DISCORD WEBHOOK CONFIGS:
 * (OPTIONAL/DEFAULT TO FALSE) DISCORD_WEBHOOK: enables discord webhook notifications
 * (REQUIRED) DISCORD_WEBHOOK_URL: the URL generated by Discord to receive webhooks
 * (OPTIONAL) DISCORD_USER_NAME: the name that should be shown as the user sending the message
 * (OPTIONAL) DISCORD_AVATAR_URL: the image to be used as the avatar for the user sending the message
 */

// allow for override by main configuration file
if(!defined("DISCORD_WEBHOOK")) define("DISCORD_WEBHOOK",false);
if(!defined("DISCORD_WEBHOOK_URL")) define("DISCORD_WEBHOOK_URL","");
if(!defined("DISCORD_USER_NAME")) define("DISCORD_USER_NAME","");
if(!defined("DISCORD_AVATAR_URL")) define("DISCORD_AVATAR_URL","");

class Discord implements Plugin {
    public static function successWebhook($params){
        $deployedMessage = "**Execution:** ".$params["execTime"]." seconds \n";
        $deployedMessage .= "**Deployed:** \n(".$params["branch"].") ".$params["remote"]."\n";
        $deployedMessage .= "**To:** ".$params["targetDirectory"]."\n";

        return self::discordMessage($deployedMessage);
    }

    public static function errorWebhook($errorMessage){
        return self::discordMessage($errorMessage,true);
    }

    private static function discordMessage($message,$error = false) {
        // check configuration errors and correct them
        if(!defined("DISCORD_WEBHOOK")) define("DISCORD_WEBHOOK",false);

        // prevent execution if discord webhook not enabled
        if(DISCORD_WEBHOOK === false) return "Discord webhook is not enabled";

        // only check other discord configuration values, if discord webhook is enabled
        if(!defined("DISCORD_WEBHOOK_URL") || empty(DISCORD_WEBHOOK_URL)){
            return 'Discord webook url not configured';
        }
        
        // abort if no message set
        if(empty($message)) return "No message provided";
        
        if($error === false){
            $data = array(
                'username' => DISCORD_USER_NAME,
                'avatar_url' => DISCORD_AVATAR_URL,
                'embeds' => [[
                    "title" => "Deploy successful!",
                    "description" => strip_tags($message),
                    "color" => "3932074"
                ]]
            );
        }else{
            $data = array(
                'username' => DISCORD_USER_NAME,
                'avatar_url' => DISCORD_AVATAR_URL,
                'embeds' => [[
                    "title" => "Deploy failed..",
                    "description" => strip_tags($message),
                    "color" => "16727357"
                ]]
            );
        }
        
        $data_string = json_encode($data);
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, DISCORD_WEBHOOK_URL);
        curl_setopt($curl, CURLOPT_POST, 1);
        curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($curl, CURLOPT_POSTFIELDS, $data_string);

        $output = curl_exec($curl);
        $output = json_decode($output, true);
        if (curl_getinfo($curl, CURLINFO_HTTP_CODE) != 204) {
            return $output["message"];
        }

        curl_close($curl);
        return true;
    }
}